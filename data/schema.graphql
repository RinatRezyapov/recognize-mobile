type Query {
  user(id: String): User
  courses: Courses

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type User implements Node {
  """The ID of an object"""
  id: ID!
  _id: Int
  username: String
  email: String
  courses(status: String = "any", after: String, first: Int, before: String, last: Int): CourseConnection
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""A connection to a list of items."""
type CourseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CourseEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type CourseEdge {
  """The item at the end of the edge"""
  node: Course

  """A cursor for use in pagination"""
  cursor: String!
}

type Course implements Node {
  """The ID of an object"""
  id: ID!
  _id: Int
  description: String
  authorId: String
  title: String
  body: String
  createdAt: Int
  updatedAt: Int
}

type Courses {
  courses(status: String = "any", after: String, first: Int, before: String, last: Int): CourseConnection
}

type Mutation {
  addCourse(input: AddCourseInput!): AddCoursePayload
  updateCourse(input: UpdateCourseInput!): UpdateCoursePayload
  removeCourse(input: RemoveCourseInput!): RemoveCoursePayload
}

type AddCoursePayload {
  courseEdge: CourseEdge!
  user: User!
  clientMutationId: String
}

input AddCourseInput {
  authorId: ID!
  title: String!
  description: String!
  body: String!
  createdAt: String!
  updatedAt: String!
  clientMutationId: String
}

type UpdateCoursePayload {
  courseEdge: CourseEdge!
  clientMutationId: String
}

input UpdateCourseInput {
  id: ID!
  title: String!
  description: String!
  body: String!
  clientMutationId: String
}

type RemoveCoursePayload {
  deletedCourseId: ID!
  clientMutationId: String
}

input RemoveCourseInput {
  id: ID!
  clientMutationId: String
}
