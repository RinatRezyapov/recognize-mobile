type Query {
  user(id: String): User
  courses: Courses
  scores: Scores
  streaks: Streaks

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type User implements Node {
  """The ID of an object"""
  id: ID!
  _id: String
  username: String
  email: String
  score(courseId: String): Score
  courses(after: String, first: Int, before: String, last: Int): CourseConnection
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Score {
  """The ID of an object"""
  id: ID!
  _id: String
  userId: String
  username: String
  courseId: String
  value: Float
  sequence: String
  course: String
}

"""A connection to a list of items."""
type CourseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CourseEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type CourseEdge {
  """The item at the end of the edge"""
  node: Course

  """A cursor for use in pagination"""
  cursor: String!
}

type Course implements Node {
  """The ID of an object"""
  id: ID!
  _id: String
  description: String
  authorId: String
  author: String
  title: String
  body: String
  avatar: String
  createdAt: Int
  updatedAt: Int
  likes: [String]
  scores(after: String, first: Int, before: String, last: Int, courseId: ID): ScoreConnection
}

"""A connection to a list of items."""
type ScoreConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ScoreEdge]
}

"""An edge in a connection."""
type ScoreEdge {
  """The item at the end of the edge"""
  node: Score

  """A cursor for use in pagination"""
  cursor: String!
}

type Courses {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  data(after: String, first: Int, before: String, last: Int): CourseConnection
}

type Scores {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  data(after: String, first: Int, before: String, last: Int): ScoreConnection
}

type Streaks {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  data(after: String, first: Int, before: String, last: Int): StreakConnection
}

"""A connection to a list of items."""
type StreakConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StreakEdge]
}

"""An edge in a connection."""
type StreakEdge {
  """The item at the end of the edge"""
  node: Streak

  """A cursor for use in pagination"""
  cursor: String!
}

type Streak {
  """The ID of an object"""
  id: ID!
  _id: String
  userId: String
  username: String
  courseId: String
  value: Float
  course: String
}

type Mutation {
  addCourse(input: AddCourseInput!): AddCoursePayload
  updateCourse(input: UpdateCourseInput!): UpdateCoursePayload
  removeCourse(input: RemoveCourseInput!): RemoveCoursePayload
  likeCourse(input: LikeCourseInput!): LikeCoursePayload
  addScore(input: AddScoreInput!): AddScorePayload
  addStreak(input: AddStreakInput!): AddStreakPayload
}

type AddCoursePayload {
  courseEdge: CourseEdge
  errors: [String]
  user: User!
  clientMutationId: String
}

input AddCourseInput {
  authorId: ID!
  title: String!
  description: String!
  body: String!
  avatar: String!
  createdAt: String!
  updatedAt: String!
  clientMutationId: String
}

type UpdateCoursePayload {
  courseEdge: CourseEdge!
  clientMutationId: String
}

input UpdateCourseInput {
  id: ID!
  title: String!
  description: String!
  body: String!
  clientMutationId: String
}

type RemoveCoursePayload {
  deletedCourseId: ID!
  clientMutationId: String
}

input RemoveCourseInput {
  id: ID!
  clientMutationId: String
}

type LikeCoursePayload {
  courseEdge: CourseEdge!
  clientMutationId: String
}

input LikeCourseInput {
  userId: ID!
  courseId: ID!
  remove: Boolean
  clientMutationId: String
}

type AddScorePayload {
  scoreEdge: ScoreEdge!
  clientMutationId: String
}

input AddScoreInput {
  userId: ID!
  courseId: ID!
  score: Float!
  sequence: String!
  clientMutationId: String
}

type AddStreakPayload {
  streakEdge: ScoreEdge!
  clientMutationId: String
}

input AddStreakInput {
  userId: ID!
  courseId: ID!
  streak: Int!
  clientMutationId: String
}
